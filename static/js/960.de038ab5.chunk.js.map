{"version":3,"file":"static/js/960.de038ab5.chunk.js","mappings":"gLACA,G,QAA8B,+B,UC0DnBA,GArBcC,EAAAA,EAAQC,YACVD,EAAAA,EAAQE,UACTF,EAAAA,EAAQG,SACPH,EAAAA,EAAQI,UACNJ,EAAAA,EAAQK,YACLL,EAAAA,EAAQM,eACZN,EAAAA,EAAQO,WACPP,EAAAA,EAAQQ,YACVR,EAAAA,EAAQS,UACLT,EAAAA,EAAQU,aACZV,EAAAA,EAAQW,SACZX,EAAAA,EAAQY,KACNZ,EAAAA,EAAQa,OACCb,EAAAA,EAAQc,gBACZd,EAAAA,EAAQe,YACRf,EAAAA,EAAQgB,YACFhB,EAAAA,EAAQiB,kBAClBjB,EAAAA,EAAQkB,QACVlB,EAAAA,EAAQmB,MACHnB,EAAAA,EAAQoB,WACLpB,EAAAA,EAAQqB,cAChBrB,EAAAA,EAAQD,O,GACDC,EAAAA,EAAQsB,aACLtB,EAAAA,EAAQuB,gBACLvB,EAAAA,EAAQwB,mBACNxB,EAAAA,EAAQyB,qBACjBzB,EAAAA,EAAQ0B,YACA1B,EAAAA,EAAQ2B,oBACjB3B,EAAAA,EAAQ4B,WACZ5B,EAAAA,EAAQ6B,OACT7B,EAAAA,EAAQ8B,MACE9B,EAAAA,EAAQ+B,gBAChB/B,EAAAA,EAAQgC,QACGhC,EAAAA,EAAQiC,mBACVjC,EAAAA,EAAQkC,iB,qCC5CtC,GAAeC,EAAAA,EAAAA,GAAU,CAAEC,KAAM,YAAjC,EAvBiB,SAAAC,GAA8C,IAA3CC,EAAWD,EAAXC,YAAaC,EAAYF,EAAZE,aAAcC,EAAQH,EAARG,SACvCC,GAAWC,EAAAA,EAAAA,MAObC,EAAgBH,EAASI,KAAI,SAAAC,GAAA,IAAGC,EAAED,EAAFC,GAAIC,EAAIF,EAAJE,KAAI,OAC1CC,EAAAA,EAAAA,KAAA,OAAAC,SAAeF,GAALD,EAAgB,IAG5B,OACEI,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAcH,SAAA,EAC5BD,EAAAA,EAAAA,KAAA,OAAAC,SAAMN,KACNO,EAAAA,EAAAA,MAAA,QAAMG,SAAUd,GAZH,SAACe,GAChBhB,EAAYgB,GACZb,EAAS1C,EAAM,YACjB,IAS2CkD,SAAA,EACrCD,EAAAA,EAAAA,KAACO,EAAAA,EAAK,CAACC,KAAK,aAAaC,UAAU,WAAWC,KAAK,UACnDV,EAAAA,EAAAA,KAAA,UAAAC,SAAQ,gEAIhB,ICFA,GAL0BU,EAAAA,EAAAA,KAfJ,SAACC,GACrB,MAAO,CACLpB,SAAUoB,EAAMpB,SAASqB,QACzBC,mBAAoBF,EAAMpB,SAASsB,mBAEvC,IAEyB,SAACrB,GACxB,MAAO,CACLH,YAAa,SAACgB,GACZb,GAASsB,EAAAA,EAAAA,IAAcT,GACzB,EAEJ,GAE0BK,CAGxBnB,E","sources":["webpack://social_network/./src/components/Dialogs/Messages/Messages.module.css?2673","../node_modules/redux-form/es/index.js","components/Dialogs/Messages/Messages.jsx","components/Dialogs/Messages/MessagesContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"MessageText\":\"Messages_MessageText__JcGQX\"};","import actions from './actions';\nexport { default as actionTypes } from './actionTypes';\nexport { ReduxFormContext } from './ReduxFormContext';\nexport { default as defaultShouldAsyncValidate } from './defaultShouldAsyncValidate';\nexport { default as defaultShouldValidate } from './defaultShouldValidate';\nexport { default as defaultShouldError } from './defaultShouldError';\nexport { default as defaultShouldWarn } from './defaultShouldWarn';\nexport { default as Form } from './Form';\nexport { default as FormName } from './FormName';\nexport { default as FormSection } from './FormSection';\nexport { SubmissionError } from './SubmissionError'; // alias for propTypes\n\nexport { default as propTypes, fieldInputPropTypes, fieldMetaPropTypes, fieldPropTypes, fieldArrayFieldsPropTypes, fieldArrayMetaPropTypes, fieldArrayPropTypes, formPropTypes } from './propTypes';\nexport { default as Field } from './Field';\nexport { default as Fields } from './Fields';\nexport { default as FieldArray } from './FieldArray';\nexport { default as formValueSelector } from './formValueSelector';\nexport { default as formValues } from './formValues';\nexport { default as getFormError } from './getFormError';\nexport { default as getFormNames } from './getFormNames';\nexport { default as getFormValues } from './getFormValues';\nexport { default as getFormInitialValues } from './getFormInitialValues';\nexport { default as getFormSyncErrors } from './getFormSyncErrors';\nexport { default as getFormMeta } from './getFormMeta';\nexport { default as getFormAsyncErrors } from './getFormAsyncErrors';\nexport { default as getFormSyncWarnings } from './getFormSyncWarnings';\nexport { default as getFormSubmitErrors } from './getFormSubmitErrors';\nexport { default as isAsyncValidating } from './isAsyncValidating';\nexport { default as isDirty } from './isDirty';\nexport { default as isInvalid } from './isInvalid';\nexport { default as isPristine } from './isPristine';\nexport { default as isValid } from './isValid';\nexport { default as isSubmitting } from './isSubmitting';\nexport { default as hasSubmitSucceeded } from './hasSubmitSucceeded';\nexport { default as hasSubmitFailed } from './hasSubmitFailed';\nexport { default as reduxForm } from './reduxForm';\nexport { default as reducer } from './reducer';\nexport { default as values } from './values';\nexport var arrayInsert = actions.arrayInsert;\nexport var arrayMove = actions.arrayMove;\nexport var arrayPop = actions.arrayPop;\nexport var arrayPush = actions.arrayPush;\nexport var arrayRemove = actions.arrayRemove;\nexport var arrayRemoveAll = actions.arrayRemoveAll;\nexport var arrayShift = actions.arrayShift;\nexport var arraySplice = actions.arraySplice;\nexport var arraySwap = actions.arraySwap;\nexport var arrayUnshift = actions.arrayUnshift;\nexport var autofill = actions.autofill;\nexport var blur = actions.blur;\nexport var change = actions.change;\nexport var clearAsyncError = actions.clearAsyncError;\nexport var clearFields = actions.clearFields;\nexport var clearSubmit = actions.clearSubmit;\nexport var clearSubmitErrors = actions.clearSubmitErrors;\nexport var destroy = actions.destroy;\nexport var focus = actions.focus;\nexport var initialize = actions.initialize;\nexport var registerField = actions.registerField;\nexport var reset = actions.reset;\nexport var resetSection = actions.resetSection;\nexport var setSubmitFailed = actions.setSubmitFailed;\nexport var setSubmitSucceeded = actions.setSubmitSucceeded;\nexport var startAsyncValidation = actions.startAsyncValidation;\nexport var startSubmit = actions.startSubmit;\nexport var stopAsyncValidation = actions.stopAsyncValidation;\nexport var stopSubmit = actions.stopSubmit;\nexport var submit = actions.submit;\nexport var touch = actions.touch;\nexport var unregisterField = actions.unregisterField;\nexport var untouch = actions.untouch;\nexport var updateSyncWarnings = actions.updateSyncWarnings;\nexport var updateSyncErrors = actions.updateSyncErrors;","import React from 'react';\nimport c from './Messages.module.css';\nimport { Field, reduxForm, reset } from 'redux-form';\nimport { useDispatch } from 'react-redux';\n\nconst Messages = ({ sendMessage, handleSubmit, Messages }) => {\n  const dispatch = useDispatch();\n\n  const onSubmit = (data) => {\n    sendMessage(data);\n    dispatch(reset('Messages'));\n  };\n\n  let RenderMessage = Messages.map(({ id, text }) => (\n    <pre key={id}>{text}</pre>\n  ));\n\n  return (\n    <div className={c.MessageText}>\n      <div>{RenderMessage}</div>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <Field name=\"newMessage\" component=\"textarea\" type=\"text\" />\n        <button>Отправить</button>\n      </form>\n    </div>\n  );\n};\n\nexport default reduxForm({ form: 'Messages' })(Messages);\n","import { addNewMessage } from '../../../Redux/MessagesReducer';\nimport Messages from './Messages';\nimport { connect } from 'react-redux';\n\nlet mapStateToProps = (state) => {\n  return {\n    Messages: state.Messages.Message,\n    updateMessageInput: state.Messages.updateMessageInput,\n  };\n};\n\nlet mapDispatchToProps = (dispatch) => {\n  return {\n    sendMessage: (data) => {\n      dispatch(addNewMessage(data));\n    },\n  };\n};\n\nconst MessagesContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Messages);\n\nexport default MessagesContainer;\n"],"names":["reset","actions","arrayInsert","arrayMove","arrayPop","arrayPush","arrayRemove","arrayRemoveAll","arrayShift","arraySplice","arraySwap","arrayUnshift","autofill","blur","change","clearAsyncError","clearFields","clearSubmit","clearSubmitErrors","destroy","focus","initialize","registerField","resetSection","setSubmitFailed","setSubmitSucceeded","startAsyncValidation","startSubmit","stopAsyncValidation","stopSubmit","submit","touch","unregisterField","untouch","updateSyncWarnings","updateSyncErrors","reduxForm","form","_ref","sendMessage","handleSubmit","Messages","dispatch","useDispatch","RenderMessage","map","_ref2","id","text","_jsx","children","_jsxs","className","c","onSubmit","data","Field","name","component","type","connect","state","Message","updateMessageInput","addNewMessage"],"sourceRoot":""}